import My : 'My.ecore';
import Ecore : 'http://www.eclipse.org/emf/2002/Ecore';
import Instance : 'Instance.requirements';

package generics : gns = 'eu.modelwriter.generics'
{
    abstract class List<E>
    {
      --invariant test: all c: Canvas | lone c;
        invariant test: ~Canvas = *Iterator;
        operation add(element : E);
        operation iterator() : Iterator<E>[?];
        invariant quantifier: all d:List | not (d in d.^contents);
    }
    invariant test1: contents in Dir -> (Dir + File);
    interface Iterator<E>
    {
        invariant test2: (File + Dir) in Root.*contents;
        operation abstract() : E[?] throws MyException<E>;
        operation interface() : Boolean;
    }
    enum Bool;
    class Car{
        attribute diesel : Boolean;
    }
    datatype Bool : 'java.lang.Boolean' { !serializable };
    class ArrayList<V> extends List<V>, Car;
    class Car;
    abstract class Person { attribute name: String  [1]; }
    class Owner<K, V extends Person & Car>
    {
        property cars : ArrayList<Car>[?];
        property owner : V[1..*];
    }
    abstract class Shape;
    class Canvas
    {
        operation draw(shapes : List<? extends My::pack::B>, x: Integer, y: Integer) : Boolean[?];
        operation <K extends Car> create(name : String);
        operation create(arg : ArrayList<? super List<Car>>[?])
        {
            requires : one ArrayList;
            body;
        }
        property ref : List<? super Car>[?];
        property heyRef: sub::Hey;
        property noWay: sub::subsub::CantTouchThis;
        property b : My::A[2..5|?];
        attribute c: String;
        attribute d: V[*|?];
        annotation;
        annotation 'modelwriter/Ferhat' ('key' = , 'key'  = 'value', =)
        {
            reference Library::books;
            class AnnotationClass extends Person , Car<T>;
            property mehmet: type[+|1];
            reference Instance::B;
            reference Instance::@requirements.0::@parts.1;
            reference Instance::@requirements.0::@parts.0;
            reference Instance::@relationships.0;
        }
    }
    class MyException<T>;
    enum BookCategory
    {
        literal Mystery = 0;
        literal ScienceFiction = 1;
        literal Biography;
    }
    package sub : s = 'subsubsub'
    {
        public class Hey;
        attr : Hey;
        package subsub : s2 = 'wow such sub'{
           public class CantTouchThis;
        }
    }
}